# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt6 UI code generator 6.1.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from random import randrange
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import pyqtSignal, pyqtSlot, Qt, QThread
import Api
import cv2
import numpy as np


                
class Ui_MainWindow(QtWidgets.QWidget):

    def scanImage(self):
        self.pbScan.setText("Please Wait..")
        self.pbScan.isEnabled = False
        self.take_picture()
        self.pbScan.setText("Scan")
        self.pbScan.isEnabled = True

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        self.display_width = 607
        self.display_height = 488
        MainWindow.resize(self.display_width, self.display_height)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pbScan = QtWidgets.QPushButton(self.centralwidget)
        self.pbScan.setGeometry(QtCore.QRect(100, 350, 401, 51))
        self.pbScan.setFlat(False)
        self.pbScan.setObjectName("pbScan")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 607, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Attendance Scan"))

        # button :: pbscan
        self.pbScan.setText(_translate("MainWindow", "Scan"))
        self.pbScan.clicked.connect(self.scanImage)

        # load webcam
        self.initializeWebcam()

    def initializeWebcam(self):

        # create imagelabel display
        self.image_label = QtWidgets.QLabel(self.centralwidget)
        self.image_label.setGeometry(QtCore.QRect(100, 70, 401, 261))
        self.image_label.resize(401,261)
        self.image_label.setObjectName("image_label")

        # create the video capture thread
        self.thread = VideoThread()
        
        # connect its signal to the update_image slot
        self.thread.change_pixmap_signal.connect(self.update_image)
        
        # start the thread
        self.thread.start()

    @pyqtSlot(np.ndarray)
    def update_image(self, cv_img):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt(cv_img)
        self.image_label.setPixmap(qt_img)
    
    def convert_cv_qt(self, cv_img):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format.Format_RGB888)
        p = convert_to_Qt_format.scaled(401, 261, QtCore.Qt.AspectRatioMode.KeepAspectRatio)
        return QtGui.QPixmap.fromImage(p)
    
    def take_picture(self):
        ret, img = cap.read()
        cv2.imwrite("opencvTest1.jpeg", img)



# Thread Class
class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)

    def run(self):
        # cv face detect with default haarcascade
        faceDetect = cv2.CascadeClassifier('haarcascade_frontalface_default.xml');
        
        # capture from web cam
        while True:
            ret, cv_img = cap.read()

            gray = cv2.cvtColor(cv_img,cv2.COLOR_BGR2GRAY)
            faces = faceDetect.detectMultiScale(gray,1.3,5);
            for (x,y,w,h) in faces:
                cv2.rectangle(cv_img,(x,y), (x+w,y+h),(0,255,0),2)

            if ret:
                self.change_pixmap_signal.emit(cv_img)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    cap = cv2.VideoCapture(0)   # webcam index
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
